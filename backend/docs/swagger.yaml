basePath: /api/v1
definitions:
  controllers.Patientofphysician:
    properties:
      ailment:
        type: string
      patientID:
        type: integer
      physicianID:
        type: integer
      roomID:
        type: integer
    type: object
  ent.Patient:
    properties:
      Patientname:
        description: Patientname holds the value of the "Patientname" field.
        type: string
      edges:
        $ref: '#/definitions/ent.PatientEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the PatientQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.PatientEdges:
    properties:
      patient:
        description: Patient holds the value of the Patient edge.
        items:
          $ref: '#/definitions/ent.Patientofphysician'
        type: array
    type: object
  ent.Patientofphysician:
    properties:
      Ailment:
        description: Ailment holds the value of the "Ailment" field.
        type: string
      edges:
        $ref: '#/definitions/ent.PatientofphysicianEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the PatientofphysicianQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.PatientofphysicianEdges:
    properties:
      idpatient:
        $ref: '#/definitions/ent.Patient'
        description: Idpatient holds the value of the Idpatient edge.
        type: object
      idphysicianid:
        $ref: '#/definitions/ent.Physician'
        description: Idphysicianid holds the value of the Idphysicianid edge.
        type: object
      roomid:
        $ref: '#/definitions/ent.Patientroom'
        description: Roomid holds the value of the Roomid edge.
        type: object
    type: object
  ent.Patientroom:
    properties:
      Typeroom:
        description: Typeroom holds the value of the "Typeroom" field.
        type: string
      edges:
        $ref: '#/definitions/ent.PatientroomEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the PatientroomQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.PatientroomEdges:
    properties:
      patientroom:
        description: Patientroom holds the value of the Patientroom edge.
        items:
          $ref: '#/definitions/ent.Patientofphysician'
        type: array
    type: object
  ent.Physician:
    properties:
      Password:
        description: Password holds the value of the "Password" field.
        type: string
      Physicianemail:
        description: Physicianemail holds the value of the "Physicianemail" field.
        type: string
      Physicianname:
        description: Physicianname holds the value of the "Physicianname" field.
        type: string
      edges:
        $ref: '#/definitions/ent.PhysicianEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the PhysicianQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.PhysicianEdges:
    properties:
      physician:
        description: Physician holds the value of the Physician edge.
        items:
          $ref: '#/definitions/ent.Patientofphysician'
        type: array
    type: object
  gin.H:
    additionalProperties: true
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for SUT SE 2563
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: SUT SA Example API
  version: "1.0"
paths:
  /patientofphysicians:
    get:
      description: list patientofphysician entities
      operationId: list-patientofphysician
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Patientofphysician'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List patientofphysician entities
    post:
      consumes:
      - application/json
      description: Create patientofphysician
      operationId: create-patientofphysician
      parameters:
      - description: Patientofphysician entity
        in: body
        name: patientofphysician
        required: true
        schema:
          $ref: '#/definitions/controllers.Patientofphysician'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Patientofphysician'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create patientofphysician
  /patientofphysicians/{id}:
    delete:
      description: get patientofphysician by ID
      operationId: delete-patientofphysician
      parameters:
      - description: Patientofphysician ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a patientofphysician entity by ID
  /patientrooms:
    get:
      description: list patientroom entities
      operationId: list-patientroom
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Patientroom'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List patientroom entities
    post:
      consumes:
      - application/json
      description: Create patientroom
      operationId: create-patientroom
      parameters:
      - description: Patientroom entity
        in: body
        name: patientroom
        required: true
        schema:
          $ref: '#/definitions/ent.Patientroom'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Patientroom'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create patientroom
  /patientrooms/{id}:
    delete:
      description: get patientroom by ID
      operationId: delete-patientroom
      parameters:
      - description: Patientroom ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a patientroom entity by ID
    get:
      description: get patientroom by ID
      operationId: get-patientroom
      parameters:
      - description: Patientroom ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Patientroom'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a patientroom entity by ID
    put:
      consumes:
      - application/json
      description: update patientroom by ID
      operationId: update-patientroom
      parameters:
      - description: Patientroom ID
        in: path
        name: id
        required: true
        type: integer
      - description: Patientroom entity
        in: body
        name: patientroom
        required: true
        schema:
          $ref: '#/definitions/ent.Patientroom'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Patientroom'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a patientroom entity by ID
  /patients:
    get:
      description: list patient entities
      operationId: list-patient
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Patient'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List patient entities
    post:
      consumes:
      - application/json
      description: Create patient
      operationId: create-patient
      parameters:
      - description: Patient entity
        in: body
        name: patient
        required: true
        schema:
          $ref: '#/definitions/ent.Patient'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Patient'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create patient
  /patients/{id}:
    delete:
      description: get patient by ID
      operationId: delete-patient
      parameters:
      - description: Patient ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a patient entity by ID
    get:
      description: get patient by ID
      operationId: get-patient
      parameters:
      - description: Patient ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Patient'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a patient entity by ID
    put:
      consumes:
      - application/json
      description: update patient by ID
      operationId: update-patient
      parameters:
      - description: Patient ID
        in: path
        name: id
        required: true
        type: integer
      - description: Patient entity
        in: body
        name: patient
        required: true
        schema:
          $ref: '#/definitions/ent.Patient'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Patient'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a patient entity by ID
  /physicians:
    get:
      description: list physician entities
      operationId: list-physician
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Physician'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List physician entities
    post:
      consumes:
      - application/json
      description: Create physician
      operationId: create-physician
      parameters:
      - description: Physician entity
        in: body
        name: physician
        required: true
        schema:
          $ref: '#/definitions/ent.Physician'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Physician'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create physician
  /physicians/{id}:
    delete:
      description: get physician by ID
      operationId: delete-physician
      parameters:
      - description: Physician ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a physician entity by ID
    get:
      description: get physician by ID
      operationId: get-physician
      parameters:
      - description: Physician ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Physician'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a physician entity by ID
    put:
      consumes:
      - application/json
      description: update physician by ID
      operationId: update-physician
      parameters:
      - description: Physician ID
        in: path
        name: id
        required: true
        type: integer
      - description: Physician entity
        in: body
        name: physician
        required: true
        schema:
          $ref: '#/definitions/ent.Physician'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Physician'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a physician entity by ID
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
  OAuth2AccessCode:
    authorizationUrl: https://example.com/oauth/authorize
    flow: accessCode
    scopes:
      admin: ' Grants read and write access to administrative information'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Application:
    flow: application
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Implicit:
    authorizationUrl: https://example.com/oauth/authorize
    flow: implicit
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    type: oauth2
  OAuth2Password:
    flow: password
    scopes:
      admin: ' Grants read and write access to administrative information'
      read: ' Grants read access'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
