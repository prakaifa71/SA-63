// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/prakaifa21/app/ent/patient"
	"github.com/prakaifa21/app/ent/patientofphysician"
	"github.com/prakaifa21/app/ent/patientroom"
	"github.com/prakaifa21/app/ent/physician"
	"github.com/prakaifa21/app/ent/predicate"
)

// PatientofphysicianUpdate is the builder for updating Patientofphysician entities.
type PatientofphysicianUpdate struct {
	config
	hooks      []Hook
	mutation   *PatientofphysicianMutation
	predicates []predicate.Patientofphysician
}

// Where adds a new predicate for the builder.
func (pu *PatientofphysicianUpdate) Where(ps ...predicate.Patientofphysician) *PatientofphysicianUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetAilment sets the Ailment field.
func (pu *PatientofphysicianUpdate) SetAilment(s string) *PatientofphysicianUpdate {
	pu.mutation.SetAilment(s)
	return pu
}

// SetIdpatientID sets the Idpatient edge to Patient by id.
func (pu *PatientofphysicianUpdate) SetIdpatientID(id int) *PatientofphysicianUpdate {
	pu.mutation.SetIdpatientID(id)
	return pu
}

// SetNillableIdpatientID sets the Idpatient edge to Patient by id if the given value is not nil.
func (pu *PatientofphysicianUpdate) SetNillableIdpatientID(id *int) *PatientofphysicianUpdate {
	if id != nil {
		pu = pu.SetIdpatientID(*id)
	}
	return pu
}

// SetIdpatient sets the Idpatient edge to Patient.
func (pu *PatientofphysicianUpdate) SetIdpatient(p *Patient) *PatientofphysicianUpdate {
	return pu.SetIdpatientID(p.ID)
}

// SetRoomidID sets the Roomid edge to Patientroom by id.
func (pu *PatientofphysicianUpdate) SetRoomidID(id int) *PatientofphysicianUpdate {
	pu.mutation.SetRoomidID(id)
	return pu
}

// SetNillableRoomidID sets the Roomid edge to Patientroom by id if the given value is not nil.
func (pu *PatientofphysicianUpdate) SetNillableRoomidID(id *int) *PatientofphysicianUpdate {
	if id != nil {
		pu = pu.SetRoomidID(*id)
	}
	return pu
}

// SetRoomid sets the Roomid edge to Patientroom.
func (pu *PatientofphysicianUpdate) SetRoomid(p *Patientroom) *PatientofphysicianUpdate {
	return pu.SetRoomidID(p.ID)
}

// SetIdphysicianidID sets the Idphysicianid edge to Physician by id.
func (pu *PatientofphysicianUpdate) SetIdphysicianidID(id int) *PatientofphysicianUpdate {
	pu.mutation.SetIdphysicianidID(id)
	return pu
}

// SetNillableIdphysicianidID sets the Idphysicianid edge to Physician by id if the given value is not nil.
func (pu *PatientofphysicianUpdate) SetNillableIdphysicianidID(id *int) *PatientofphysicianUpdate {
	if id != nil {
		pu = pu.SetIdphysicianidID(*id)
	}
	return pu
}

// SetIdphysicianid sets the Idphysicianid edge to Physician.
func (pu *PatientofphysicianUpdate) SetIdphysicianid(p *Physician) *PatientofphysicianUpdate {
	return pu.SetIdphysicianidID(p.ID)
}

// Mutation returns the PatientofphysicianMutation object of the builder.
func (pu *PatientofphysicianUpdate) Mutation() *PatientofphysicianMutation {
	return pu.mutation
}

// ClearIdpatient clears the Idpatient edge to Patient.
func (pu *PatientofphysicianUpdate) ClearIdpatient() *PatientofphysicianUpdate {
	pu.mutation.ClearIdpatient()
	return pu
}

// ClearRoomid clears the Roomid edge to Patientroom.
func (pu *PatientofphysicianUpdate) ClearRoomid() *PatientofphysicianUpdate {
	pu.mutation.ClearRoomid()
	return pu
}

// ClearIdphysicianid clears the Idphysicianid edge to Physician.
func (pu *PatientofphysicianUpdate) ClearIdphysicianid() *PatientofphysicianUpdate {
	pu.mutation.ClearIdphysicianid()
	return pu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *PatientofphysicianUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PatientofphysicianMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PatientofphysicianUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PatientofphysicianUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PatientofphysicianUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PatientofphysicianUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   patientofphysician.Table,
			Columns: patientofphysician.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: patientofphysician.FieldID,
			},
		},
	}
	if ps := pu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Ailment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patientofphysician.FieldAilment,
		})
	}
	if pu.mutation.IdpatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientofphysician.IdpatientTable,
			Columns: []string{patientofphysician.IdpatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.IdpatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientofphysician.IdpatientTable,
			Columns: []string{patientofphysician.IdpatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.RoomidCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientofphysician.RoomidTable,
			Columns: []string{patientofphysician.RoomidColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patientroom.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RoomidIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientofphysician.RoomidTable,
			Columns: []string{patientofphysician.RoomidColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patientroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.IdphysicianidCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientofphysician.IdphysicianidTable,
			Columns: []string{patientofphysician.IdphysicianidColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: physician.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.IdphysicianidIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientofphysician.IdphysicianidTable,
			Columns: []string{patientofphysician.IdphysicianidColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: physician.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{patientofphysician.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PatientofphysicianUpdateOne is the builder for updating a single Patientofphysician entity.
type PatientofphysicianUpdateOne struct {
	config
	hooks    []Hook
	mutation *PatientofphysicianMutation
}

// SetAilment sets the Ailment field.
func (puo *PatientofphysicianUpdateOne) SetAilment(s string) *PatientofphysicianUpdateOne {
	puo.mutation.SetAilment(s)
	return puo
}

// SetIdpatientID sets the Idpatient edge to Patient by id.
func (puo *PatientofphysicianUpdateOne) SetIdpatientID(id int) *PatientofphysicianUpdateOne {
	puo.mutation.SetIdpatientID(id)
	return puo
}

// SetNillableIdpatientID sets the Idpatient edge to Patient by id if the given value is not nil.
func (puo *PatientofphysicianUpdateOne) SetNillableIdpatientID(id *int) *PatientofphysicianUpdateOne {
	if id != nil {
		puo = puo.SetIdpatientID(*id)
	}
	return puo
}

// SetIdpatient sets the Idpatient edge to Patient.
func (puo *PatientofphysicianUpdateOne) SetIdpatient(p *Patient) *PatientofphysicianUpdateOne {
	return puo.SetIdpatientID(p.ID)
}

// SetRoomidID sets the Roomid edge to Patientroom by id.
func (puo *PatientofphysicianUpdateOne) SetRoomidID(id int) *PatientofphysicianUpdateOne {
	puo.mutation.SetRoomidID(id)
	return puo
}

// SetNillableRoomidID sets the Roomid edge to Patientroom by id if the given value is not nil.
func (puo *PatientofphysicianUpdateOne) SetNillableRoomidID(id *int) *PatientofphysicianUpdateOne {
	if id != nil {
		puo = puo.SetRoomidID(*id)
	}
	return puo
}

// SetRoomid sets the Roomid edge to Patientroom.
func (puo *PatientofphysicianUpdateOne) SetRoomid(p *Patientroom) *PatientofphysicianUpdateOne {
	return puo.SetRoomidID(p.ID)
}

// SetIdphysicianidID sets the Idphysicianid edge to Physician by id.
func (puo *PatientofphysicianUpdateOne) SetIdphysicianidID(id int) *PatientofphysicianUpdateOne {
	puo.mutation.SetIdphysicianidID(id)
	return puo
}

// SetNillableIdphysicianidID sets the Idphysicianid edge to Physician by id if the given value is not nil.
func (puo *PatientofphysicianUpdateOne) SetNillableIdphysicianidID(id *int) *PatientofphysicianUpdateOne {
	if id != nil {
		puo = puo.SetIdphysicianidID(*id)
	}
	return puo
}

// SetIdphysicianid sets the Idphysicianid edge to Physician.
func (puo *PatientofphysicianUpdateOne) SetIdphysicianid(p *Physician) *PatientofphysicianUpdateOne {
	return puo.SetIdphysicianidID(p.ID)
}

// Mutation returns the PatientofphysicianMutation object of the builder.
func (puo *PatientofphysicianUpdateOne) Mutation() *PatientofphysicianMutation {
	return puo.mutation
}

// ClearIdpatient clears the Idpatient edge to Patient.
func (puo *PatientofphysicianUpdateOne) ClearIdpatient() *PatientofphysicianUpdateOne {
	puo.mutation.ClearIdpatient()
	return puo
}

// ClearRoomid clears the Roomid edge to Patientroom.
func (puo *PatientofphysicianUpdateOne) ClearRoomid() *PatientofphysicianUpdateOne {
	puo.mutation.ClearRoomid()
	return puo
}

// ClearIdphysicianid clears the Idphysicianid edge to Physician.
func (puo *PatientofphysicianUpdateOne) ClearIdphysicianid() *PatientofphysicianUpdateOne {
	puo.mutation.ClearIdphysicianid()
	return puo
}

// Save executes the query and returns the updated entity.
func (puo *PatientofphysicianUpdateOne) Save(ctx context.Context) (*Patientofphysician, error) {

	var (
		err  error
		node *Patientofphysician
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PatientofphysicianMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PatientofphysicianUpdateOne) SaveX(ctx context.Context) *Patientofphysician {
	pa, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pa
}

// Exec executes the query on the entity.
func (puo *PatientofphysicianUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PatientofphysicianUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PatientofphysicianUpdateOne) sqlSave(ctx context.Context) (pa *Patientofphysician, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   patientofphysician.Table,
			Columns: patientofphysician.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: patientofphysician.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Patientofphysician.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := puo.mutation.Ailment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patientofphysician.FieldAilment,
		})
	}
	if puo.mutation.IdpatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientofphysician.IdpatientTable,
			Columns: []string{patientofphysician.IdpatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.IdpatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientofphysician.IdpatientTable,
			Columns: []string{patientofphysician.IdpatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.RoomidCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientofphysician.RoomidTable,
			Columns: []string{patientofphysician.RoomidColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patientroom.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RoomidIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientofphysician.RoomidTable,
			Columns: []string{patientofphysician.RoomidColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patientroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.IdphysicianidCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientofphysician.IdphysicianidTable,
			Columns: []string{patientofphysician.IdphysicianidColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: physician.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.IdphysicianidIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientofphysician.IdphysicianidTable,
			Columns: []string{patientofphysician.IdphysicianidColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: physician.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	pa = &Patientofphysician{config: puo.config}
	_spec.Assign = pa.assignValues
	_spec.ScanValues = pa.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{patientofphysician.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pa, nil
}
