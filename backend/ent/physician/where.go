// Code generated by entc, DO NOT EDIT.

package physician

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/prakaifa21/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Physicianname applies equality check predicate on the "Physicianname" field. It's identical to PhysiciannameEQ.
func Physicianname(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhysicianname), v))
	})
}

// Physicianemail applies equality check predicate on the "Physicianemail" field. It's identical to PhysicianemailEQ.
func Physicianemail(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhysicianemail), v))
	})
}

// Password applies equality check predicate on the "Password" field. It's identical to PasswordEQ.
func Password(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassword), v))
	})
}

// PhysiciannameEQ applies the EQ predicate on the "Physicianname" field.
func PhysiciannameEQ(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhysicianname), v))
	})
}

// PhysiciannameNEQ applies the NEQ predicate on the "Physicianname" field.
func PhysiciannameNEQ(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPhysicianname), v))
	})
}

// PhysiciannameIn applies the In predicate on the "Physicianname" field.
func PhysiciannameIn(vs ...string) predicate.Physician {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Physician(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPhysicianname), v...))
	})
}

// PhysiciannameNotIn applies the NotIn predicate on the "Physicianname" field.
func PhysiciannameNotIn(vs ...string) predicate.Physician {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Physician(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPhysicianname), v...))
	})
}

// PhysiciannameGT applies the GT predicate on the "Physicianname" field.
func PhysiciannameGT(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPhysicianname), v))
	})
}

// PhysiciannameGTE applies the GTE predicate on the "Physicianname" field.
func PhysiciannameGTE(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPhysicianname), v))
	})
}

// PhysiciannameLT applies the LT predicate on the "Physicianname" field.
func PhysiciannameLT(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPhysicianname), v))
	})
}

// PhysiciannameLTE applies the LTE predicate on the "Physicianname" field.
func PhysiciannameLTE(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPhysicianname), v))
	})
}

// PhysiciannameContains applies the Contains predicate on the "Physicianname" field.
func PhysiciannameContains(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPhysicianname), v))
	})
}

// PhysiciannameHasPrefix applies the HasPrefix predicate on the "Physicianname" field.
func PhysiciannameHasPrefix(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPhysicianname), v))
	})
}

// PhysiciannameHasSuffix applies the HasSuffix predicate on the "Physicianname" field.
func PhysiciannameHasSuffix(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPhysicianname), v))
	})
}

// PhysiciannameEqualFold applies the EqualFold predicate on the "Physicianname" field.
func PhysiciannameEqualFold(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPhysicianname), v))
	})
}

// PhysiciannameContainsFold applies the ContainsFold predicate on the "Physicianname" field.
func PhysiciannameContainsFold(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPhysicianname), v))
	})
}

// PhysicianemailEQ applies the EQ predicate on the "Physicianemail" field.
func PhysicianemailEQ(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhysicianemail), v))
	})
}

// PhysicianemailNEQ applies the NEQ predicate on the "Physicianemail" field.
func PhysicianemailNEQ(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPhysicianemail), v))
	})
}

// PhysicianemailIn applies the In predicate on the "Physicianemail" field.
func PhysicianemailIn(vs ...string) predicate.Physician {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Physician(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPhysicianemail), v...))
	})
}

// PhysicianemailNotIn applies the NotIn predicate on the "Physicianemail" field.
func PhysicianemailNotIn(vs ...string) predicate.Physician {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Physician(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPhysicianemail), v...))
	})
}

// PhysicianemailGT applies the GT predicate on the "Physicianemail" field.
func PhysicianemailGT(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPhysicianemail), v))
	})
}

// PhysicianemailGTE applies the GTE predicate on the "Physicianemail" field.
func PhysicianemailGTE(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPhysicianemail), v))
	})
}

// PhysicianemailLT applies the LT predicate on the "Physicianemail" field.
func PhysicianemailLT(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPhysicianemail), v))
	})
}

// PhysicianemailLTE applies the LTE predicate on the "Physicianemail" field.
func PhysicianemailLTE(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPhysicianemail), v))
	})
}

// PhysicianemailContains applies the Contains predicate on the "Physicianemail" field.
func PhysicianemailContains(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPhysicianemail), v))
	})
}

// PhysicianemailHasPrefix applies the HasPrefix predicate on the "Physicianemail" field.
func PhysicianemailHasPrefix(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPhysicianemail), v))
	})
}

// PhysicianemailHasSuffix applies the HasSuffix predicate on the "Physicianemail" field.
func PhysicianemailHasSuffix(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPhysicianemail), v))
	})
}

// PhysicianemailEqualFold applies the EqualFold predicate on the "Physicianemail" field.
func PhysicianemailEqualFold(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPhysicianemail), v))
	})
}

// PhysicianemailContainsFold applies the ContainsFold predicate on the "Physicianemail" field.
func PhysicianemailContainsFold(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPhysicianemail), v))
	})
}

// PasswordEQ applies the EQ predicate on the "Password" field.
func PasswordEQ(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassword), v))
	})
}

// PasswordNEQ applies the NEQ predicate on the "Password" field.
func PasswordNEQ(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPassword), v))
	})
}

// PasswordIn applies the In predicate on the "Password" field.
func PasswordIn(vs ...string) predicate.Physician {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Physician(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPassword), v...))
	})
}

// PasswordNotIn applies the NotIn predicate on the "Password" field.
func PasswordNotIn(vs ...string) predicate.Physician {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Physician(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPassword), v...))
	})
}

// PasswordGT applies the GT predicate on the "Password" field.
func PasswordGT(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPassword), v))
	})
}

// PasswordGTE applies the GTE predicate on the "Password" field.
func PasswordGTE(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPassword), v))
	})
}

// PasswordLT applies the LT predicate on the "Password" field.
func PasswordLT(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPassword), v))
	})
}

// PasswordLTE applies the LTE predicate on the "Password" field.
func PasswordLTE(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPassword), v))
	})
}

// PasswordContains applies the Contains predicate on the "Password" field.
func PasswordContains(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPassword), v))
	})
}

// PasswordHasPrefix applies the HasPrefix predicate on the "Password" field.
func PasswordHasPrefix(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPassword), v))
	})
}

// PasswordHasSuffix applies the HasSuffix predicate on the "Password" field.
func PasswordHasSuffix(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPassword), v))
	})
}

// PasswordEqualFold applies the EqualFold predicate on the "Password" field.
func PasswordEqualFold(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPassword), v))
	})
}

// PasswordContainsFold applies the ContainsFold predicate on the "Password" field.
func PasswordContainsFold(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPassword), v))
	})
}

// HasPhysician applies the HasEdge predicate on the "Physician" edge.
func HasPhysician() predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PhysicianTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PhysicianTable, PhysicianColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPhysicianWith applies the HasEdge predicate on the "Physician" edge with a given conditions (other predicates).
func HasPhysicianWith(preds ...predicate.Patientofphysician) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PhysicianInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PhysicianTable, PhysicianColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Physician) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Physician) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Physician) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		p(s.Not())
	})
}
