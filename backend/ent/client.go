// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/prakaifa21/app/ent/migrate"

	"github.com/prakaifa21/app/ent/patient"
	"github.com/prakaifa21/app/ent/patientofphysician"
	"github.com/prakaifa21/app/ent/patientroom"
	"github.com/prakaifa21/app/ent/physician"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Patient is the client for interacting with the Patient builders.
	Patient *PatientClient
	// Patientofphysician is the client for interacting with the Patientofphysician builders.
	Patientofphysician *PatientofphysicianClient
	// Patientroom is the client for interacting with the Patientroom builders.
	Patientroom *PatientroomClient
	// Physician is the client for interacting with the Physician builders.
	Physician *PhysicianClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Patient = NewPatientClient(c.config)
	c.Patientofphysician = NewPatientofphysicianClient(c.config)
	c.Patientroom = NewPatientroomClient(c.config)
	c.Physician = NewPhysicianClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:                ctx,
		config:             cfg,
		Patient:            NewPatientClient(cfg),
		Patientofphysician: NewPatientofphysicianClient(cfg),
		Patientroom:        NewPatientroomClient(cfg),
		Physician:          NewPhysicianClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:             cfg,
		Patient:            NewPatientClient(cfg),
		Patientofphysician: NewPatientofphysicianClient(cfg),
		Patientroom:        NewPatientroomClient(cfg),
		Physician:          NewPhysicianClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Patient.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Patient.Use(hooks...)
	c.Patientofphysician.Use(hooks...)
	c.Patientroom.Use(hooks...)
	c.Physician.Use(hooks...)
}

// PatientClient is a client for the Patient schema.
type PatientClient struct {
	config
}

// NewPatientClient returns a client for the Patient from the given config.
func NewPatientClient(c config) *PatientClient {
	return &PatientClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `patient.Hooks(f(g(h())))`.
func (c *PatientClient) Use(hooks ...Hook) {
	c.hooks.Patient = append(c.hooks.Patient, hooks...)
}

// Create returns a create builder for Patient.
func (c *PatientClient) Create() *PatientCreate {
	mutation := newPatientMutation(c.config, OpCreate)
	return &PatientCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Patient.
func (c *PatientClient) Update() *PatientUpdate {
	mutation := newPatientMutation(c.config, OpUpdate)
	return &PatientUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PatientClient) UpdateOne(pa *Patient) *PatientUpdateOne {
	mutation := newPatientMutation(c.config, OpUpdateOne, withPatient(pa))
	return &PatientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PatientClient) UpdateOneID(id int) *PatientUpdateOne {
	mutation := newPatientMutation(c.config, OpUpdateOne, withPatientID(id))
	return &PatientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Patient.
func (c *PatientClient) Delete() *PatientDelete {
	mutation := newPatientMutation(c.config, OpDelete)
	return &PatientDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PatientClient) DeleteOne(pa *Patient) *PatientDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PatientClient) DeleteOneID(id int) *PatientDeleteOne {
	builder := c.Delete().Where(patient.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PatientDeleteOne{builder}
}

// Create returns a query builder for Patient.
func (c *PatientClient) Query() *PatientQuery {
	return &PatientQuery{config: c.config}
}

// Get returns a Patient entity by its id.
func (c *PatientClient) Get(ctx context.Context, id int) (*Patient, error) {
	return c.Query().Where(patient.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PatientClient) GetX(ctx context.Context, id int) *Patient {
	pa, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pa
}

// QueryPatient queries the Patient edge of a Patient.
func (c *PatientClient) QueryPatient(pa *Patient) *PatientofphysicianQuery {
	query := &PatientofphysicianQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patient.Table, patient.FieldID, id),
			sqlgraph.To(patientofphysician.Table, patientofphysician.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, patient.PatientTable, patient.PatientColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PatientClient) Hooks() []Hook {
	return c.hooks.Patient
}

// PatientofphysicianClient is a client for the Patientofphysician schema.
type PatientofphysicianClient struct {
	config
}

// NewPatientofphysicianClient returns a client for the Patientofphysician from the given config.
func NewPatientofphysicianClient(c config) *PatientofphysicianClient {
	return &PatientofphysicianClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `patientofphysician.Hooks(f(g(h())))`.
func (c *PatientofphysicianClient) Use(hooks ...Hook) {
	c.hooks.Patientofphysician = append(c.hooks.Patientofphysician, hooks...)
}

// Create returns a create builder for Patientofphysician.
func (c *PatientofphysicianClient) Create() *PatientofphysicianCreate {
	mutation := newPatientofphysicianMutation(c.config, OpCreate)
	return &PatientofphysicianCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Patientofphysician.
func (c *PatientofphysicianClient) Update() *PatientofphysicianUpdate {
	mutation := newPatientofphysicianMutation(c.config, OpUpdate)
	return &PatientofphysicianUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PatientofphysicianClient) UpdateOne(pa *Patientofphysician) *PatientofphysicianUpdateOne {
	mutation := newPatientofphysicianMutation(c.config, OpUpdateOne, withPatientofphysician(pa))
	return &PatientofphysicianUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PatientofphysicianClient) UpdateOneID(id int) *PatientofphysicianUpdateOne {
	mutation := newPatientofphysicianMutation(c.config, OpUpdateOne, withPatientofphysicianID(id))
	return &PatientofphysicianUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Patientofphysician.
func (c *PatientofphysicianClient) Delete() *PatientofphysicianDelete {
	mutation := newPatientofphysicianMutation(c.config, OpDelete)
	return &PatientofphysicianDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PatientofphysicianClient) DeleteOne(pa *Patientofphysician) *PatientofphysicianDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PatientofphysicianClient) DeleteOneID(id int) *PatientofphysicianDeleteOne {
	builder := c.Delete().Where(patientofphysician.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PatientofphysicianDeleteOne{builder}
}

// Create returns a query builder for Patientofphysician.
func (c *PatientofphysicianClient) Query() *PatientofphysicianQuery {
	return &PatientofphysicianQuery{config: c.config}
}

// Get returns a Patientofphysician entity by its id.
func (c *PatientofphysicianClient) Get(ctx context.Context, id int) (*Patientofphysician, error) {
	return c.Query().Where(patientofphysician.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PatientofphysicianClient) GetX(ctx context.Context, id int) *Patientofphysician {
	pa, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pa
}

// QueryIdpatient queries the Idpatient edge of a Patientofphysician.
func (c *PatientofphysicianClient) QueryIdpatient(pa *Patientofphysician) *PatientQuery {
	query := &PatientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patientofphysician.Table, patientofphysician.FieldID, id),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, patientofphysician.IdpatientTable, patientofphysician.IdpatientColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoomid queries the Roomid edge of a Patientofphysician.
func (c *PatientofphysicianClient) QueryRoomid(pa *Patientofphysician) *PatientroomQuery {
	query := &PatientroomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patientofphysician.Table, patientofphysician.FieldID, id),
			sqlgraph.To(patientroom.Table, patientroom.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, patientofphysician.RoomidTable, patientofphysician.RoomidColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIdphysicianid queries the Idphysicianid edge of a Patientofphysician.
func (c *PatientofphysicianClient) QueryIdphysicianid(pa *Patientofphysician) *PhysicianQuery {
	query := &PhysicianQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patientofphysician.Table, patientofphysician.FieldID, id),
			sqlgraph.To(physician.Table, physician.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, patientofphysician.IdphysicianidTable, patientofphysician.IdphysicianidColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PatientofphysicianClient) Hooks() []Hook {
	return c.hooks.Patientofphysician
}

// PatientroomClient is a client for the Patientroom schema.
type PatientroomClient struct {
	config
}

// NewPatientroomClient returns a client for the Patientroom from the given config.
func NewPatientroomClient(c config) *PatientroomClient {
	return &PatientroomClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `patientroom.Hooks(f(g(h())))`.
func (c *PatientroomClient) Use(hooks ...Hook) {
	c.hooks.Patientroom = append(c.hooks.Patientroom, hooks...)
}

// Create returns a create builder for Patientroom.
func (c *PatientroomClient) Create() *PatientroomCreate {
	mutation := newPatientroomMutation(c.config, OpCreate)
	return &PatientroomCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Patientroom.
func (c *PatientroomClient) Update() *PatientroomUpdate {
	mutation := newPatientroomMutation(c.config, OpUpdate)
	return &PatientroomUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PatientroomClient) UpdateOne(pa *Patientroom) *PatientroomUpdateOne {
	mutation := newPatientroomMutation(c.config, OpUpdateOne, withPatientroom(pa))
	return &PatientroomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PatientroomClient) UpdateOneID(id int) *PatientroomUpdateOne {
	mutation := newPatientroomMutation(c.config, OpUpdateOne, withPatientroomID(id))
	return &PatientroomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Patientroom.
func (c *PatientroomClient) Delete() *PatientroomDelete {
	mutation := newPatientroomMutation(c.config, OpDelete)
	return &PatientroomDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PatientroomClient) DeleteOne(pa *Patientroom) *PatientroomDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PatientroomClient) DeleteOneID(id int) *PatientroomDeleteOne {
	builder := c.Delete().Where(patientroom.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PatientroomDeleteOne{builder}
}

// Create returns a query builder for Patientroom.
func (c *PatientroomClient) Query() *PatientroomQuery {
	return &PatientroomQuery{config: c.config}
}

// Get returns a Patientroom entity by its id.
func (c *PatientroomClient) Get(ctx context.Context, id int) (*Patientroom, error) {
	return c.Query().Where(patientroom.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PatientroomClient) GetX(ctx context.Context, id int) *Patientroom {
	pa, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pa
}

// QueryPatientroom queries the Patientroom edge of a Patientroom.
func (c *PatientroomClient) QueryPatientroom(pa *Patientroom) *PatientofphysicianQuery {
	query := &PatientofphysicianQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patientroom.Table, patientroom.FieldID, id),
			sqlgraph.To(patientofphysician.Table, patientofphysician.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, patientroom.PatientroomTable, patientroom.PatientroomColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PatientroomClient) Hooks() []Hook {
	return c.hooks.Patientroom
}

// PhysicianClient is a client for the Physician schema.
type PhysicianClient struct {
	config
}

// NewPhysicianClient returns a client for the Physician from the given config.
func NewPhysicianClient(c config) *PhysicianClient {
	return &PhysicianClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `physician.Hooks(f(g(h())))`.
func (c *PhysicianClient) Use(hooks ...Hook) {
	c.hooks.Physician = append(c.hooks.Physician, hooks...)
}

// Create returns a create builder for Physician.
func (c *PhysicianClient) Create() *PhysicianCreate {
	mutation := newPhysicianMutation(c.config, OpCreate)
	return &PhysicianCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Physician.
func (c *PhysicianClient) Update() *PhysicianUpdate {
	mutation := newPhysicianMutation(c.config, OpUpdate)
	return &PhysicianUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PhysicianClient) UpdateOne(ph *Physician) *PhysicianUpdateOne {
	mutation := newPhysicianMutation(c.config, OpUpdateOne, withPhysician(ph))
	return &PhysicianUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PhysicianClient) UpdateOneID(id int) *PhysicianUpdateOne {
	mutation := newPhysicianMutation(c.config, OpUpdateOne, withPhysicianID(id))
	return &PhysicianUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Physician.
func (c *PhysicianClient) Delete() *PhysicianDelete {
	mutation := newPhysicianMutation(c.config, OpDelete)
	return &PhysicianDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PhysicianClient) DeleteOne(ph *Physician) *PhysicianDeleteOne {
	return c.DeleteOneID(ph.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PhysicianClient) DeleteOneID(id int) *PhysicianDeleteOne {
	builder := c.Delete().Where(physician.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PhysicianDeleteOne{builder}
}

// Create returns a query builder for Physician.
func (c *PhysicianClient) Query() *PhysicianQuery {
	return &PhysicianQuery{config: c.config}
}

// Get returns a Physician entity by its id.
func (c *PhysicianClient) Get(ctx context.Context, id int) (*Physician, error) {
	return c.Query().Where(physician.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PhysicianClient) GetX(ctx context.Context, id int) *Physician {
	ph, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return ph
}

// QueryPhysician queries the Physician edge of a Physician.
func (c *PhysicianClient) QueryPhysician(ph *Physician) *PatientofphysicianQuery {
	query := &PatientofphysicianQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(physician.Table, physician.FieldID, id),
			sqlgraph.To(patientofphysician.Table, patientofphysician.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, physician.PhysicianTable, physician.PhysicianColumn),
		)
		fromV = sqlgraph.Neighbors(ph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PhysicianClient) Hooks() []Hook {
	return c.hooks.Physician
}
