// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/prakaifa21/app/ent/patientofphysician"
	"github.com/prakaifa21/app/ent/physician"
)

// PhysicianCreate is the builder for creating a Physician entity.
type PhysicianCreate struct {
	config
	mutation *PhysicianMutation
	hooks    []Hook
}

// SetPhysicianname sets the Physicianname field.
func (pc *PhysicianCreate) SetPhysicianname(s string) *PhysicianCreate {
	pc.mutation.SetPhysicianname(s)
	return pc
}

// SetPhysicianemail sets the Physicianemail field.
func (pc *PhysicianCreate) SetPhysicianemail(s string) *PhysicianCreate {
	pc.mutation.SetPhysicianemail(s)
	return pc
}

// SetPassword sets the Password field.
func (pc *PhysicianCreate) SetPassword(s string) *PhysicianCreate {
	pc.mutation.SetPassword(s)
	return pc
}

// AddPhysicianIDs adds the Physician edge to Patientofphysician by ids.
func (pc *PhysicianCreate) AddPhysicianIDs(ids ...int) *PhysicianCreate {
	pc.mutation.AddPhysicianIDs(ids...)
	return pc
}

// AddPhysician adds the Physician edges to Patientofphysician.
func (pc *PhysicianCreate) AddPhysician(p ...*Patientofphysician) *PhysicianCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddPhysicianIDs(ids...)
}

// Mutation returns the PhysicianMutation object of the builder.
func (pc *PhysicianCreate) Mutation() *PhysicianMutation {
	return pc.mutation
}

// Save creates the Physician in the database.
func (pc *PhysicianCreate) Save(ctx context.Context) (*Physician, error) {
	if _, ok := pc.mutation.Physicianname(); !ok {
		return nil, &ValidationError{Name: "Physicianname", err: errors.New("ent: missing required field \"Physicianname\"")}
	}
	if _, ok := pc.mutation.Physicianemail(); !ok {
		return nil, &ValidationError{Name: "Physicianemail", err: errors.New("ent: missing required field \"Physicianemail\"")}
	}
	if _, ok := pc.mutation.Password(); !ok {
		return nil, &ValidationError{Name: "Password", err: errors.New("ent: missing required field \"Password\"")}
	}
	var (
		err  error
		node *Physician
	)
	if len(pc.hooks) == 0 {
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PhysicianMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PhysicianCreate) SaveX(ctx context.Context) *Physician {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *PhysicianCreate) sqlSave(ctx context.Context) (*Physician, error) {
	ph, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	ph.ID = int(id)
	return ph, nil
}

func (pc *PhysicianCreate) createSpec() (*Physician, *sqlgraph.CreateSpec) {
	var (
		ph    = &Physician{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: physician.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: physician.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.Physicianname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: physician.FieldPhysicianname,
		})
		ph.Physicianname = value
	}
	if value, ok := pc.mutation.Physicianemail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: physician.FieldPhysicianemail,
		})
		ph.Physicianemail = value
	}
	if value, ok := pc.mutation.Password(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: physician.FieldPassword,
		})
		ph.Password = value
	}
	if nodes := pc.mutation.PhysicianIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   physician.PhysicianTable,
			Columns: []string{physician.PhysicianColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patientofphysician.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return ph, _spec
}
