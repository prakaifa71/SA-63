// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/prakaifa21/app/ent/patient"
	"github.com/prakaifa21/app/ent/patientofphysician"
	"github.com/prakaifa21/app/ent/patientroom"
	"github.com/prakaifa21/app/ent/physician"
)

// Patientofphysician is the model entity for the Patientofphysician schema.
type Patientofphysician struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Ailment holds the value of the "Ailment" field.
	Ailment string `json:"Ailment,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PatientofphysicianQuery when eager-loading is set.
	Edges                   PatientofphysicianEdges `json:"edges"`
	patient_patient         *int
	patientroom_patientroom *int
	physician_physician     *int
}

// PatientofphysicianEdges holds the relations/edges for other nodes in the graph.
type PatientofphysicianEdges struct {
	// Idpatient holds the value of the Idpatient edge.
	Idpatient *Patient
	// Roomid holds the value of the Roomid edge.
	Roomid *Patientroom
	// Idphysicianid holds the value of the Idphysicianid edge.
	Idphysicianid *Physician
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// IdpatientOrErr returns the Idpatient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PatientofphysicianEdges) IdpatientOrErr() (*Patient, error) {
	if e.loadedTypes[0] {
		if e.Idpatient == nil {
			// The edge Idpatient was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: patient.Label}
		}
		return e.Idpatient, nil
	}
	return nil, &NotLoadedError{edge: "Idpatient"}
}

// RoomidOrErr returns the Roomid value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PatientofphysicianEdges) RoomidOrErr() (*Patientroom, error) {
	if e.loadedTypes[1] {
		if e.Roomid == nil {
			// The edge Roomid was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: patientroom.Label}
		}
		return e.Roomid, nil
	}
	return nil, &NotLoadedError{edge: "Roomid"}
}

// IdphysicianidOrErr returns the Idphysicianid value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PatientofphysicianEdges) IdphysicianidOrErr() (*Physician, error) {
	if e.loadedTypes[2] {
		if e.Idphysicianid == nil {
			// The edge Idphysicianid was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: physician.Label}
		}
		return e.Idphysicianid, nil
	}
	return nil, &NotLoadedError{edge: "Idphysicianid"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Patientofphysician) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // Ailment
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Patientofphysician) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // patient_patient
		&sql.NullInt64{}, // patientroom_patientroom
		&sql.NullInt64{}, // physician_physician
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Patientofphysician fields.
func (pa *Patientofphysician) assignValues(values ...interface{}) error {
	if m, n := len(values), len(patientofphysician.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pa.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Ailment", values[0])
	} else if value.Valid {
		pa.Ailment = value.String
	}
	values = values[1:]
	if len(values) == len(patientofphysician.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field patient_patient", value)
		} else if value.Valid {
			pa.patient_patient = new(int)
			*pa.patient_patient = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field patientroom_patientroom", value)
		} else if value.Valid {
			pa.patientroom_patientroom = new(int)
			*pa.patientroom_patientroom = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field physician_physician", value)
		} else if value.Valid {
			pa.physician_physician = new(int)
			*pa.physician_physician = int(value.Int64)
		}
	}
	return nil
}

// QueryIdpatient queries the Idpatient edge of the Patientofphysician.
func (pa *Patientofphysician) QueryIdpatient() *PatientQuery {
	return (&PatientofphysicianClient{config: pa.config}).QueryIdpatient(pa)
}

// QueryRoomid queries the Roomid edge of the Patientofphysician.
func (pa *Patientofphysician) QueryRoomid() *PatientroomQuery {
	return (&PatientofphysicianClient{config: pa.config}).QueryRoomid(pa)
}

// QueryIdphysicianid queries the Idphysicianid edge of the Patientofphysician.
func (pa *Patientofphysician) QueryIdphysicianid() *PhysicianQuery {
	return (&PatientofphysicianClient{config: pa.config}).QueryIdphysicianid(pa)
}

// Update returns a builder for updating this Patientofphysician.
// Note that, you need to call Patientofphysician.Unwrap() before calling this method, if this Patientofphysician
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Patientofphysician) Update() *PatientofphysicianUpdateOne {
	return (&PatientofphysicianClient{config: pa.config}).UpdateOne(pa)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pa *Patientofphysician) Unwrap() *Patientofphysician {
	tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Patientofphysician is not a transactional entity")
	}
	pa.config.driver = tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Patientofphysician) String() string {
	var builder strings.Builder
	builder.WriteString("Patientofphysician(")
	builder.WriteString(fmt.Sprintf("id=%v", pa.ID))
	builder.WriteString(", Ailment=")
	builder.WriteString(pa.Ailment)
	builder.WriteByte(')')
	return builder.String()
}

// Patientofphysicians is a parsable slice of Patientofphysician.
type Patientofphysicians []*Patientofphysician

func (pa Patientofphysicians) config(cfg config) {
	for _i := range pa {
		pa[_i].config = cfg
	}
}
