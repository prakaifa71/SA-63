// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/prakaifa21/app/ent/patient"
	"github.com/prakaifa21/app/ent/patientofphysician"
	"github.com/prakaifa21/app/ent/patientroom"
	"github.com/prakaifa21/app/ent/physician"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypePatient            = "Patient"
	TypePatientofphysician = "Patientofphysician"
	TypePatientroom        = "Patientroom"
	TypePhysician          = "Physician"
)

// PatientMutation represents an operation that mutate the Patients
// nodes in the graph.
type PatientMutation struct {
	config
	op              Op
	typ             string
	id              *int
	_Patientname    *string
	clearedFields   map[string]struct{}
	_Patient        map[int]struct{}
	removed_Patient map[int]struct{}
	done            bool
	oldValue        func(context.Context) (*Patient, error)
}

var _ ent.Mutation = (*PatientMutation)(nil)

// patientOption allows to manage the mutation configuration using functional options.
type patientOption func(*PatientMutation)

// newPatientMutation creates new mutation for $n.Name.
func newPatientMutation(c config, op Op, opts ...patientOption) *PatientMutation {
	m := &PatientMutation{
		config:        c,
		op:            op,
		typ:           TypePatient,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPatientID sets the id field of the mutation.
func withPatientID(id int) patientOption {
	return func(m *PatientMutation) {
		var (
			err   error
			once  sync.Once
			value *Patient
		)
		m.oldValue = func(ctx context.Context) (*Patient, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Patient.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPatient sets the old Patient of the mutation.
func withPatient(node *Patient) patientOption {
	return func(m *PatientMutation) {
		m.oldValue = func(context.Context) (*Patient, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PatientMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PatientMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PatientMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPatientname sets the Patientname field.
func (m *PatientMutation) SetPatientname(s string) {
	m._Patientname = &s
}

// Patientname returns the Patientname value in the mutation.
func (m *PatientMutation) Patientname() (r string, exists bool) {
	v := m._Patientname
	if v == nil {
		return
	}
	return *v, true
}

// OldPatientname returns the old Patientname value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldPatientname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPatientname is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPatientname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPatientname: %w", err)
	}
	return oldValue.Patientname, nil
}

// ResetPatientname reset all changes of the "Patientname" field.
func (m *PatientMutation) ResetPatientname() {
	m._Patientname = nil
}

// AddPatientIDs adds the Patient edge to Patientofphysician by ids.
func (m *PatientMutation) AddPatientIDs(ids ...int) {
	if m._Patient == nil {
		m._Patient = make(map[int]struct{})
	}
	for i := range ids {
		m._Patient[ids[i]] = struct{}{}
	}
}

// RemovePatientIDs removes the Patient edge to Patientofphysician by ids.
func (m *PatientMutation) RemovePatientIDs(ids ...int) {
	if m.removed_Patient == nil {
		m.removed_Patient = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_Patient[ids[i]] = struct{}{}
	}
}

// RemovedPatient returns the removed ids of Patient.
func (m *PatientMutation) RemovedPatientIDs() (ids []int) {
	for id := range m.removed_Patient {
		ids = append(ids, id)
	}
	return
}

// PatientIDs returns the Patient ids in the mutation.
func (m *PatientMutation) PatientIDs() (ids []int) {
	for id := range m._Patient {
		ids = append(ids, id)
	}
	return
}

// ResetPatient reset all changes of the "Patient" edge.
func (m *PatientMutation) ResetPatient() {
	m._Patient = nil
	m.removed_Patient = nil
}

// Op returns the operation name.
func (m *PatientMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Patient).
func (m *PatientMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PatientMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Patientname != nil {
		fields = append(fields, patient.FieldPatientname)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PatientMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case patient.FieldPatientname:
		return m.Patientname()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PatientMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case patient.FieldPatientname:
		return m.OldPatientname(ctx)
	}
	return nil, fmt.Errorf("unknown Patient field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientMutation) SetField(name string, value ent.Value) error {
	switch name {
	case patient.FieldPatientname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPatientname(v)
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PatientMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PatientMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Patient numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PatientMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PatientMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PatientMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Patient nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PatientMutation) ResetField(name string) error {
	switch name {
	case patient.FieldPatientname:
		m.ResetPatientname()
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PatientMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._Patient != nil {
		edges = append(edges, patient.EdgePatient)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PatientMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgePatient:
		ids := make([]ent.Value, 0, len(m._Patient))
		for id := range m._Patient {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PatientMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_Patient != nil {
		edges = append(edges, patient.EdgePatient)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PatientMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgePatient:
		ids := make([]ent.Value, 0, len(m.removed_Patient))
		for id := range m.removed_Patient {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PatientMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PatientMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PatientMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Patient unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PatientMutation) ResetEdge(name string) error {
	switch name {
	case patient.EdgePatient:
		m.ResetPatient()
		return nil
	}
	return fmt.Errorf("unknown Patient edge %s", name)
}

// PatientofphysicianMutation represents an operation that mutate the Patientofphysicians
// nodes in the graph.
type PatientofphysicianMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	_Ailment              *string
	clearedFields         map[string]struct{}
	_Idpatient            *int
	cleared_Idpatient     bool
	_Roomid               *int
	cleared_Roomid        bool
	_Idphysicianid        *int
	cleared_Idphysicianid bool
	done                  bool
	oldValue              func(context.Context) (*Patientofphysician, error)
}

var _ ent.Mutation = (*PatientofphysicianMutation)(nil)

// patientofphysicianOption allows to manage the mutation configuration using functional options.
type patientofphysicianOption func(*PatientofphysicianMutation)

// newPatientofphysicianMutation creates new mutation for $n.Name.
func newPatientofphysicianMutation(c config, op Op, opts ...patientofphysicianOption) *PatientofphysicianMutation {
	m := &PatientofphysicianMutation{
		config:        c,
		op:            op,
		typ:           TypePatientofphysician,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPatientofphysicianID sets the id field of the mutation.
func withPatientofphysicianID(id int) patientofphysicianOption {
	return func(m *PatientofphysicianMutation) {
		var (
			err   error
			once  sync.Once
			value *Patientofphysician
		)
		m.oldValue = func(ctx context.Context) (*Patientofphysician, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Patientofphysician.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPatientofphysician sets the old Patientofphysician of the mutation.
func withPatientofphysician(node *Patientofphysician) patientofphysicianOption {
	return func(m *PatientofphysicianMutation) {
		m.oldValue = func(context.Context) (*Patientofphysician, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PatientofphysicianMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PatientofphysicianMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PatientofphysicianMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetAilment sets the Ailment field.
func (m *PatientofphysicianMutation) SetAilment(s string) {
	m._Ailment = &s
}

// Ailment returns the Ailment value in the mutation.
func (m *PatientofphysicianMutation) Ailment() (r string, exists bool) {
	v := m._Ailment
	if v == nil {
		return
	}
	return *v, true
}

// OldAilment returns the old Ailment value of the Patientofphysician.
// If the Patientofphysician object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientofphysicianMutation) OldAilment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAilment is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAilment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAilment: %w", err)
	}
	return oldValue.Ailment, nil
}

// ResetAilment reset all changes of the "Ailment" field.
func (m *PatientofphysicianMutation) ResetAilment() {
	m._Ailment = nil
}

// SetIdpatientID sets the Idpatient edge to Patient by id.
func (m *PatientofphysicianMutation) SetIdpatientID(id int) {
	m._Idpatient = &id
}

// ClearIdpatient clears the Idpatient edge to Patient.
func (m *PatientofphysicianMutation) ClearIdpatient() {
	m.cleared_Idpatient = true
}

// IdpatientCleared returns if the edge Idpatient was cleared.
func (m *PatientofphysicianMutation) IdpatientCleared() bool {
	return m.cleared_Idpatient
}

// IdpatientID returns the Idpatient id in the mutation.
func (m *PatientofphysicianMutation) IdpatientID() (id int, exists bool) {
	if m._Idpatient != nil {
		return *m._Idpatient, true
	}
	return
}

// IdpatientIDs returns the Idpatient ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// IdpatientID instead. It exists only for internal usage by the builders.
func (m *PatientofphysicianMutation) IdpatientIDs() (ids []int) {
	if id := m._Idpatient; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetIdpatient reset all changes of the "Idpatient" edge.
func (m *PatientofphysicianMutation) ResetIdpatient() {
	m._Idpatient = nil
	m.cleared_Idpatient = false
}

// SetRoomidID sets the Roomid edge to Patientroom by id.
func (m *PatientofphysicianMutation) SetRoomidID(id int) {
	m._Roomid = &id
}

// ClearRoomid clears the Roomid edge to Patientroom.
func (m *PatientofphysicianMutation) ClearRoomid() {
	m.cleared_Roomid = true
}

// RoomidCleared returns if the edge Roomid was cleared.
func (m *PatientofphysicianMutation) RoomidCleared() bool {
	return m.cleared_Roomid
}

// RoomidID returns the Roomid id in the mutation.
func (m *PatientofphysicianMutation) RoomidID() (id int, exists bool) {
	if m._Roomid != nil {
		return *m._Roomid, true
	}
	return
}

// RoomidIDs returns the Roomid ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// RoomidID instead. It exists only for internal usage by the builders.
func (m *PatientofphysicianMutation) RoomidIDs() (ids []int) {
	if id := m._Roomid; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRoomid reset all changes of the "Roomid" edge.
func (m *PatientofphysicianMutation) ResetRoomid() {
	m._Roomid = nil
	m.cleared_Roomid = false
}

// SetIdphysicianidID sets the Idphysicianid edge to Physician by id.
func (m *PatientofphysicianMutation) SetIdphysicianidID(id int) {
	m._Idphysicianid = &id
}

// ClearIdphysicianid clears the Idphysicianid edge to Physician.
func (m *PatientofphysicianMutation) ClearIdphysicianid() {
	m.cleared_Idphysicianid = true
}

// IdphysicianidCleared returns if the edge Idphysicianid was cleared.
func (m *PatientofphysicianMutation) IdphysicianidCleared() bool {
	return m.cleared_Idphysicianid
}

// IdphysicianidID returns the Idphysicianid id in the mutation.
func (m *PatientofphysicianMutation) IdphysicianidID() (id int, exists bool) {
	if m._Idphysicianid != nil {
		return *m._Idphysicianid, true
	}
	return
}

// IdphysicianidIDs returns the Idphysicianid ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// IdphysicianidID instead. It exists only for internal usage by the builders.
func (m *PatientofphysicianMutation) IdphysicianidIDs() (ids []int) {
	if id := m._Idphysicianid; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetIdphysicianid reset all changes of the "Idphysicianid" edge.
func (m *PatientofphysicianMutation) ResetIdphysicianid() {
	m._Idphysicianid = nil
	m.cleared_Idphysicianid = false
}

// Op returns the operation name.
func (m *PatientofphysicianMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Patientofphysician).
func (m *PatientofphysicianMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PatientofphysicianMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Ailment != nil {
		fields = append(fields, patientofphysician.FieldAilment)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PatientofphysicianMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case patientofphysician.FieldAilment:
		return m.Ailment()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PatientofphysicianMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case patientofphysician.FieldAilment:
		return m.OldAilment(ctx)
	}
	return nil, fmt.Errorf("unknown Patientofphysician field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientofphysicianMutation) SetField(name string, value ent.Value) error {
	switch name {
	case patientofphysician.FieldAilment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAilment(v)
		return nil
	}
	return fmt.Errorf("unknown Patientofphysician field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PatientofphysicianMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PatientofphysicianMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientofphysicianMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Patientofphysician numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PatientofphysicianMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PatientofphysicianMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PatientofphysicianMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Patientofphysician nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PatientofphysicianMutation) ResetField(name string) error {
	switch name {
	case patientofphysician.FieldAilment:
		m.ResetAilment()
		return nil
	}
	return fmt.Errorf("unknown Patientofphysician field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PatientofphysicianMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m._Idpatient != nil {
		edges = append(edges, patientofphysician.EdgeIdpatient)
	}
	if m._Roomid != nil {
		edges = append(edges, patientofphysician.EdgeRoomid)
	}
	if m._Idphysicianid != nil {
		edges = append(edges, patientofphysician.EdgeIdphysicianid)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PatientofphysicianMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case patientofphysician.EdgeIdpatient:
		if id := m._Idpatient; id != nil {
			return []ent.Value{*id}
		}
	case patientofphysician.EdgeRoomid:
		if id := m._Roomid; id != nil {
			return []ent.Value{*id}
		}
	case patientofphysician.EdgeIdphysicianid:
		if id := m._Idphysicianid; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PatientofphysicianMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PatientofphysicianMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PatientofphysicianMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleared_Idpatient {
		edges = append(edges, patientofphysician.EdgeIdpatient)
	}
	if m.cleared_Roomid {
		edges = append(edges, patientofphysician.EdgeRoomid)
	}
	if m.cleared_Idphysicianid {
		edges = append(edges, patientofphysician.EdgeIdphysicianid)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PatientofphysicianMutation) EdgeCleared(name string) bool {
	switch name {
	case patientofphysician.EdgeIdpatient:
		return m.cleared_Idpatient
	case patientofphysician.EdgeRoomid:
		return m.cleared_Roomid
	case patientofphysician.EdgeIdphysicianid:
		return m.cleared_Idphysicianid
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PatientofphysicianMutation) ClearEdge(name string) error {
	switch name {
	case patientofphysician.EdgeIdpatient:
		m.ClearIdpatient()
		return nil
	case patientofphysician.EdgeRoomid:
		m.ClearRoomid()
		return nil
	case patientofphysician.EdgeIdphysicianid:
		m.ClearIdphysicianid()
		return nil
	}
	return fmt.Errorf("unknown Patientofphysician unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PatientofphysicianMutation) ResetEdge(name string) error {
	switch name {
	case patientofphysician.EdgeIdpatient:
		m.ResetIdpatient()
		return nil
	case patientofphysician.EdgeRoomid:
		m.ResetRoomid()
		return nil
	case patientofphysician.EdgeIdphysicianid:
		m.ResetIdphysicianid()
		return nil
	}
	return fmt.Errorf("unknown Patientofphysician edge %s", name)
}

// PatientroomMutation represents an operation that mutate the Patientrooms
// nodes in the graph.
type PatientroomMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	_Typeroom           *string
	clearedFields       map[string]struct{}
	_Patientroom        map[int]struct{}
	removed_Patientroom map[int]struct{}
	done                bool
	oldValue            func(context.Context) (*Patientroom, error)
}

var _ ent.Mutation = (*PatientroomMutation)(nil)

// patientroomOption allows to manage the mutation configuration using functional options.
type patientroomOption func(*PatientroomMutation)

// newPatientroomMutation creates new mutation for $n.Name.
func newPatientroomMutation(c config, op Op, opts ...patientroomOption) *PatientroomMutation {
	m := &PatientroomMutation{
		config:        c,
		op:            op,
		typ:           TypePatientroom,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPatientroomID sets the id field of the mutation.
func withPatientroomID(id int) patientroomOption {
	return func(m *PatientroomMutation) {
		var (
			err   error
			once  sync.Once
			value *Patientroom
		)
		m.oldValue = func(ctx context.Context) (*Patientroom, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Patientroom.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPatientroom sets the old Patientroom of the mutation.
func withPatientroom(node *Patientroom) patientroomOption {
	return func(m *PatientroomMutation) {
		m.oldValue = func(context.Context) (*Patientroom, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PatientroomMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PatientroomMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PatientroomMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTyperoom sets the Typeroom field.
func (m *PatientroomMutation) SetTyperoom(s string) {
	m._Typeroom = &s
}

// Typeroom returns the Typeroom value in the mutation.
func (m *PatientroomMutation) Typeroom() (r string, exists bool) {
	v := m._Typeroom
	if v == nil {
		return
	}
	return *v, true
}

// OldTyperoom returns the old Typeroom value of the Patientroom.
// If the Patientroom object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientroomMutation) OldTyperoom(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTyperoom is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTyperoom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTyperoom: %w", err)
	}
	return oldValue.Typeroom, nil
}

// ResetTyperoom reset all changes of the "Typeroom" field.
func (m *PatientroomMutation) ResetTyperoom() {
	m._Typeroom = nil
}

// AddPatientroomIDs adds the Patientroom edge to Patientofphysician by ids.
func (m *PatientroomMutation) AddPatientroomIDs(ids ...int) {
	if m._Patientroom == nil {
		m._Patientroom = make(map[int]struct{})
	}
	for i := range ids {
		m._Patientroom[ids[i]] = struct{}{}
	}
}

// RemovePatientroomIDs removes the Patientroom edge to Patientofphysician by ids.
func (m *PatientroomMutation) RemovePatientroomIDs(ids ...int) {
	if m.removed_Patientroom == nil {
		m.removed_Patientroom = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_Patientroom[ids[i]] = struct{}{}
	}
}

// RemovedPatientroom returns the removed ids of Patientroom.
func (m *PatientroomMutation) RemovedPatientroomIDs() (ids []int) {
	for id := range m.removed_Patientroom {
		ids = append(ids, id)
	}
	return
}

// PatientroomIDs returns the Patientroom ids in the mutation.
func (m *PatientroomMutation) PatientroomIDs() (ids []int) {
	for id := range m._Patientroom {
		ids = append(ids, id)
	}
	return
}

// ResetPatientroom reset all changes of the "Patientroom" edge.
func (m *PatientroomMutation) ResetPatientroom() {
	m._Patientroom = nil
	m.removed_Patientroom = nil
}

// Op returns the operation name.
func (m *PatientroomMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Patientroom).
func (m *PatientroomMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PatientroomMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Typeroom != nil {
		fields = append(fields, patientroom.FieldTyperoom)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PatientroomMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case patientroom.FieldTyperoom:
		return m.Typeroom()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PatientroomMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case patientroom.FieldTyperoom:
		return m.OldTyperoom(ctx)
	}
	return nil, fmt.Errorf("unknown Patientroom field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientroomMutation) SetField(name string, value ent.Value) error {
	switch name {
	case patientroom.FieldTyperoom:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTyperoom(v)
		return nil
	}
	return fmt.Errorf("unknown Patientroom field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PatientroomMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PatientroomMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientroomMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Patientroom numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PatientroomMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PatientroomMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PatientroomMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Patientroom nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PatientroomMutation) ResetField(name string) error {
	switch name {
	case patientroom.FieldTyperoom:
		m.ResetTyperoom()
		return nil
	}
	return fmt.Errorf("unknown Patientroom field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PatientroomMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._Patientroom != nil {
		edges = append(edges, patientroom.EdgePatientroom)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PatientroomMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case patientroom.EdgePatientroom:
		ids := make([]ent.Value, 0, len(m._Patientroom))
		for id := range m._Patientroom {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PatientroomMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_Patientroom != nil {
		edges = append(edges, patientroom.EdgePatientroom)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PatientroomMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case patientroom.EdgePatientroom:
		ids := make([]ent.Value, 0, len(m.removed_Patientroom))
		for id := range m.removed_Patientroom {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PatientroomMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PatientroomMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PatientroomMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Patientroom unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PatientroomMutation) ResetEdge(name string) error {
	switch name {
	case patientroom.EdgePatientroom:
		m.ResetPatientroom()
		return nil
	}
	return fmt.Errorf("unknown Patientroom edge %s", name)
}

// PhysicianMutation represents an operation that mutate the Physicians
// nodes in the graph.
type PhysicianMutation struct {
	config
	op                Op
	typ               string
	id                *int
	_Physicianname    *string
	_Physicianemail   *string
	_Password         *string
	clearedFields     map[string]struct{}
	_Physician        map[int]struct{}
	removed_Physician map[int]struct{}
	done              bool
	oldValue          func(context.Context) (*Physician, error)
}

var _ ent.Mutation = (*PhysicianMutation)(nil)

// physicianOption allows to manage the mutation configuration using functional options.
type physicianOption func(*PhysicianMutation)

// newPhysicianMutation creates new mutation for $n.Name.
func newPhysicianMutation(c config, op Op, opts ...physicianOption) *PhysicianMutation {
	m := &PhysicianMutation{
		config:        c,
		op:            op,
		typ:           TypePhysician,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPhysicianID sets the id field of the mutation.
func withPhysicianID(id int) physicianOption {
	return func(m *PhysicianMutation) {
		var (
			err   error
			once  sync.Once
			value *Physician
		)
		m.oldValue = func(ctx context.Context) (*Physician, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Physician.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPhysician sets the old Physician of the mutation.
func withPhysician(node *Physician) physicianOption {
	return func(m *PhysicianMutation) {
		m.oldValue = func(context.Context) (*Physician, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PhysicianMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PhysicianMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PhysicianMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPhysicianname sets the Physicianname field.
func (m *PhysicianMutation) SetPhysicianname(s string) {
	m._Physicianname = &s
}

// Physicianname returns the Physicianname value in the mutation.
func (m *PhysicianMutation) Physicianname() (r string, exists bool) {
	v := m._Physicianname
	if v == nil {
		return
	}
	return *v, true
}

// OldPhysicianname returns the old Physicianname value of the Physician.
// If the Physician object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PhysicianMutation) OldPhysicianname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPhysicianname is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPhysicianname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhysicianname: %w", err)
	}
	return oldValue.Physicianname, nil
}

// ResetPhysicianname reset all changes of the "Physicianname" field.
func (m *PhysicianMutation) ResetPhysicianname() {
	m._Physicianname = nil
}

// SetPhysicianemail sets the Physicianemail field.
func (m *PhysicianMutation) SetPhysicianemail(s string) {
	m._Physicianemail = &s
}

// Physicianemail returns the Physicianemail value in the mutation.
func (m *PhysicianMutation) Physicianemail() (r string, exists bool) {
	v := m._Physicianemail
	if v == nil {
		return
	}
	return *v, true
}

// OldPhysicianemail returns the old Physicianemail value of the Physician.
// If the Physician object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PhysicianMutation) OldPhysicianemail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPhysicianemail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPhysicianemail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhysicianemail: %w", err)
	}
	return oldValue.Physicianemail, nil
}

// ResetPhysicianemail reset all changes of the "Physicianemail" field.
func (m *PhysicianMutation) ResetPhysicianemail() {
	m._Physicianemail = nil
}

// SetPassword sets the Password field.
func (m *PhysicianMutation) SetPassword(s string) {
	m._Password = &s
}

// Password returns the Password value in the mutation.
func (m *PhysicianMutation) Password() (r string, exists bool) {
	v := m._Password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old Password value of the Physician.
// If the Physician object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PhysicianMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPassword is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword reset all changes of the "Password" field.
func (m *PhysicianMutation) ResetPassword() {
	m._Password = nil
}

// AddPhysicianIDs adds the Physician edge to Patientofphysician by ids.
func (m *PhysicianMutation) AddPhysicianIDs(ids ...int) {
	if m._Physician == nil {
		m._Physician = make(map[int]struct{})
	}
	for i := range ids {
		m._Physician[ids[i]] = struct{}{}
	}
}

// RemovePhysicianIDs removes the Physician edge to Patientofphysician by ids.
func (m *PhysicianMutation) RemovePhysicianIDs(ids ...int) {
	if m.removed_Physician == nil {
		m.removed_Physician = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_Physician[ids[i]] = struct{}{}
	}
}

// RemovedPhysician returns the removed ids of Physician.
func (m *PhysicianMutation) RemovedPhysicianIDs() (ids []int) {
	for id := range m.removed_Physician {
		ids = append(ids, id)
	}
	return
}

// PhysicianIDs returns the Physician ids in the mutation.
func (m *PhysicianMutation) PhysicianIDs() (ids []int) {
	for id := range m._Physician {
		ids = append(ids, id)
	}
	return
}

// ResetPhysician reset all changes of the "Physician" edge.
func (m *PhysicianMutation) ResetPhysician() {
	m._Physician = nil
	m.removed_Physician = nil
}

// Op returns the operation name.
func (m *PhysicianMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Physician).
func (m *PhysicianMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PhysicianMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m._Physicianname != nil {
		fields = append(fields, physician.FieldPhysicianname)
	}
	if m._Physicianemail != nil {
		fields = append(fields, physician.FieldPhysicianemail)
	}
	if m._Password != nil {
		fields = append(fields, physician.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PhysicianMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case physician.FieldPhysicianname:
		return m.Physicianname()
	case physician.FieldPhysicianemail:
		return m.Physicianemail()
	case physician.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PhysicianMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case physician.FieldPhysicianname:
		return m.OldPhysicianname(ctx)
	case physician.FieldPhysicianemail:
		return m.OldPhysicianemail(ctx)
	case physician.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown Physician field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PhysicianMutation) SetField(name string, value ent.Value) error {
	switch name {
	case physician.FieldPhysicianname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhysicianname(v)
		return nil
	case physician.FieldPhysicianemail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhysicianemail(v)
		return nil
	case physician.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown Physician field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PhysicianMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PhysicianMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PhysicianMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Physician numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PhysicianMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PhysicianMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PhysicianMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Physician nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PhysicianMutation) ResetField(name string) error {
	switch name {
	case physician.FieldPhysicianname:
		m.ResetPhysicianname()
		return nil
	case physician.FieldPhysicianemail:
		m.ResetPhysicianemail()
		return nil
	case physician.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown Physician field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PhysicianMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._Physician != nil {
		edges = append(edges, physician.EdgePhysician)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PhysicianMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case physician.EdgePhysician:
		ids := make([]ent.Value, 0, len(m._Physician))
		for id := range m._Physician {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PhysicianMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_Physician != nil {
		edges = append(edges, physician.EdgePhysician)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PhysicianMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case physician.EdgePhysician:
		ids := make([]ent.Value, 0, len(m.removed_Physician))
		for id := range m.removed_Physician {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PhysicianMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PhysicianMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PhysicianMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Physician unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PhysicianMutation) ResetEdge(name string) error {
	switch name {
	case physician.EdgePhysician:
		m.ResetPhysician()
		return nil
	}
	return fmt.Errorf("unknown Physician edge %s", name)
}
