// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"github.com/facebookincubator/ent/dialect/sql/schema"
	"github.com/facebookincubator/ent/schema/field"
)

var (
	// PatientsColumns holds the columns for the "patients" table.
	PatientsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "patientname", Type: field.TypeString, Unique: true},
	}
	// PatientsTable holds the schema information for the "patients" table.
	PatientsTable = &schema.Table{
		Name:        "patients",
		Columns:     PatientsColumns,
		PrimaryKey:  []*schema.Column{PatientsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// PatientofphysiciansColumns holds the columns for the "patientofphysicians" table.
	PatientofphysiciansColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "ailment", Type: field.TypeString},
		{Name: "patient_patient", Type: field.TypeInt, Nullable: true},
		{Name: "patientroom_patientroom", Type: field.TypeInt, Nullable: true},
		{Name: "physician_physician", Type: field.TypeInt, Nullable: true},
	}
	// PatientofphysiciansTable holds the schema information for the "patientofphysicians" table.
	PatientofphysiciansTable = &schema.Table{
		Name:       "patientofphysicians",
		Columns:    PatientofphysiciansColumns,
		PrimaryKey: []*schema.Column{PatientofphysiciansColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "patientofphysicians_patients_Patient",
				Columns: []*schema.Column{PatientofphysiciansColumns[2]},

				RefColumns: []*schema.Column{PatientsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "patientofphysicians_patientrooms_Patientroom",
				Columns: []*schema.Column{PatientofphysiciansColumns[3]},

				RefColumns: []*schema.Column{PatientroomsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "patientofphysicians_physicians_Physician",
				Columns: []*schema.Column{PatientofphysiciansColumns[4]},

				RefColumns: []*schema.Column{PhysiciansColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// PatientroomsColumns holds the columns for the "patientrooms" table.
	PatientroomsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "typeroom", Type: field.TypeString, Unique: true},
	}
	// PatientroomsTable holds the schema information for the "patientrooms" table.
	PatientroomsTable = &schema.Table{
		Name:        "patientrooms",
		Columns:     PatientroomsColumns,
		PrimaryKey:  []*schema.Column{PatientroomsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// PhysiciansColumns holds the columns for the "physicians" table.
	PhysiciansColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "physicianname", Type: field.TypeString},
		{Name: "physicianemail", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
	}
	// PhysiciansTable holds the schema information for the "physicians" table.
	PhysiciansTable = &schema.Table{
		Name:        "physicians",
		Columns:     PhysiciansColumns,
		PrimaryKey:  []*schema.Column{PhysiciansColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		PatientsTable,
		PatientofphysiciansTable,
		PatientroomsTable,
		PhysiciansTable,
	}
)

func init() {
	PatientofphysiciansTable.ForeignKeys[0].RefTable = PatientsTable
	PatientofphysiciansTable.ForeignKeys[1].RefTable = PatientroomsTable
	PatientofphysiciansTable.ForeignKeys[2].RefTable = PhysiciansTable
}
