// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/prakaifa21/app/ent/patient"
	"github.com/prakaifa21/app/ent/patientofphysician"
	"github.com/prakaifa21/app/ent/patientroom"
	"github.com/prakaifa21/app/ent/physician"
)

// PatientofphysicianCreate is the builder for creating a Patientofphysician entity.
type PatientofphysicianCreate struct {
	config
	mutation *PatientofphysicianMutation
	hooks    []Hook
}

// SetAilment sets the Ailment field.
func (pc *PatientofphysicianCreate) SetAilment(s string) *PatientofphysicianCreate {
	pc.mutation.SetAilment(s)
	return pc
}

// SetIdpatientID sets the Idpatient edge to Patient by id.
func (pc *PatientofphysicianCreate) SetIdpatientID(id int) *PatientofphysicianCreate {
	pc.mutation.SetIdpatientID(id)
	return pc
}

// SetNillableIdpatientID sets the Idpatient edge to Patient by id if the given value is not nil.
func (pc *PatientofphysicianCreate) SetNillableIdpatientID(id *int) *PatientofphysicianCreate {
	if id != nil {
		pc = pc.SetIdpatientID(*id)
	}
	return pc
}

// SetIdpatient sets the Idpatient edge to Patient.
func (pc *PatientofphysicianCreate) SetIdpatient(p *Patient) *PatientofphysicianCreate {
	return pc.SetIdpatientID(p.ID)
}

// SetRoomidID sets the Roomid edge to Patientroom by id.
func (pc *PatientofphysicianCreate) SetRoomidID(id int) *PatientofphysicianCreate {
	pc.mutation.SetRoomidID(id)
	return pc
}

// SetNillableRoomidID sets the Roomid edge to Patientroom by id if the given value is not nil.
func (pc *PatientofphysicianCreate) SetNillableRoomidID(id *int) *PatientofphysicianCreate {
	if id != nil {
		pc = pc.SetRoomidID(*id)
	}
	return pc
}

// SetRoomid sets the Roomid edge to Patientroom.
func (pc *PatientofphysicianCreate) SetRoomid(p *Patientroom) *PatientofphysicianCreate {
	return pc.SetRoomidID(p.ID)
}

// SetIdphysicianidID sets the Idphysicianid edge to Physician by id.
func (pc *PatientofphysicianCreate) SetIdphysicianidID(id int) *PatientofphysicianCreate {
	pc.mutation.SetIdphysicianidID(id)
	return pc
}

// SetNillableIdphysicianidID sets the Idphysicianid edge to Physician by id if the given value is not nil.
func (pc *PatientofphysicianCreate) SetNillableIdphysicianidID(id *int) *PatientofphysicianCreate {
	if id != nil {
		pc = pc.SetIdphysicianidID(*id)
	}
	return pc
}

// SetIdphysicianid sets the Idphysicianid edge to Physician.
func (pc *PatientofphysicianCreate) SetIdphysicianid(p *Physician) *PatientofphysicianCreate {
	return pc.SetIdphysicianidID(p.ID)
}

// Mutation returns the PatientofphysicianMutation object of the builder.
func (pc *PatientofphysicianCreate) Mutation() *PatientofphysicianMutation {
	return pc.mutation
}

// Save creates the Patientofphysician in the database.
func (pc *PatientofphysicianCreate) Save(ctx context.Context) (*Patientofphysician, error) {
	if _, ok := pc.mutation.Ailment(); !ok {
		return nil, &ValidationError{Name: "Ailment", err: errors.New("ent: missing required field \"Ailment\"")}
	}
	var (
		err  error
		node *Patientofphysician
	)
	if len(pc.hooks) == 0 {
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PatientofphysicianMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PatientofphysicianCreate) SaveX(ctx context.Context) *Patientofphysician {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *PatientofphysicianCreate) sqlSave(ctx context.Context) (*Patientofphysician, error) {
	pa, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	pa.ID = int(id)
	return pa, nil
}

func (pc *PatientofphysicianCreate) createSpec() (*Patientofphysician, *sqlgraph.CreateSpec) {
	var (
		pa    = &Patientofphysician{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: patientofphysician.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: patientofphysician.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.Ailment(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patientofphysician.FieldAilment,
		})
		pa.Ailment = value
	}
	if nodes := pc.mutation.IdpatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientofphysician.IdpatientTable,
			Columns: []string{patientofphysician.IdpatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.RoomidIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientofphysician.RoomidTable,
			Columns: []string{patientofphysician.RoomidColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patientroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.IdphysicianidIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patientofphysician.IdphysicianidTable,
			Columns: []string{patientofphysician.IdphysicianidColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: physician.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return pa, _spec
}
