/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersPatientofphysician,
    ControllersPatientofphysicianFromJSON,
    ControllersPatientofphysicianToJSON,
    EntPatient,
    EntPatientFromJSON,
    EntPatientToJSON,
    EntPatientofphysician,
    EntPatientofphysicianFromJSON,
    EntPatientofphysicianToJSON,
    EntPatientroom,
    EntPatientroomFromJSON,
    EntPatientroomToJSON,
    EntPhysician,
    EntPhysicianFromJSON,
    EntPhysicianToJSON,
} from '../models';

export interface CreatePatientRequest {
    patient: EntPatient;
}

export interface CreatePatientofphysicianRequest {
    patientofphysician: ControllersPatientofphysician;
}

export interface CreatePatientroomRequest {
    patientroom: EntPatientroom;
}

export interface CreatePhysicianRequest {
    physician: EntPhysician;
}

export interface DeletePatientRequest {
    id: number;
}

export interface DeletePatientofphysicianRequest {
    id: number;
}

export interface DeletePatientroomRequest {
    id: number;
}

export interface DeletePhysicianRequest {
    id: number;
}

export interface GetPatientRequest {
    id: number;
}

export interface GetPatientroomRequest {
    id: number;
}

export interface GetPhysicianRequest {
    id: number;
}

export interface ListPatientRequest {
    limit?: number;
    offset?: number;
}

export interface ListPatientofphysicianRequest {
    limit?: number;
    offset?: number;
}

export interface ListPatientroomRequest {
    limit?: number;
    offset?: number;
}

export interface ListPhysicianRequest {
    limit?: number;
    offset?: number;
}

export interface UpdatePatientRequest {
    id: number;
    patient: EntPatient;
}

export interface UpdatePatientroomRequest {
    id: number;
    patientroom: EntPatientroom;
}

export interface UpdatePhysicianRequest {
    id: number;
    physician: EntPhysician;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create patient
     * Create patient
     */
    async createPatientRaw(requestParameters: CreatePatientRequest): Promise<runtime.ApiResponse<EntPatient>> {
        if (requestParameters.patient === null || requestParameters.patient === undefined) {
            throw new runtime.RequiredError('patient','Required parameter requestParameters.patient was null or undefined when calling createPatient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patients`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPatientToJSON(requestParameters.patient),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientFromJSON(jsonValue));
    }

    /**
     * Create patient
     * Create patient
     */
    async createPatient(requestParameters: CreatePatientRequest): Promise<EntPatient> {
        const response = await this.createPatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create patientofphysician
     * Create patientofphysician
     */
    async createPatientofphysicianRaw(requestParameters: CreatePatientofphysicianRequest): Promise<runtime.ApiResponse<EntPatientofphysician>> {
        if (requestParameters.patientofphysician === null || requestParameters.patientofphysician === undefined) {
            throw new runtime.RequiredError('patientofphysician','Required parameter requestParameters.patientofphysician was null or undefined when calling createPatientofphysician.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patientofphysicians`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersPatientofphysicianToJSON(requestParameters.patientofphysician),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientofphysicianFromJSON(jsonValue));
    }

    /**
     * Create patientofphysician
     * Create patientofphysician
     */
    async createPatientofphysician(requestParameters: CreatePatientofphysicianRequest): Promise<EntPatientofphysician> {
        const response = await this.createPatientofphysicianRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create patientroom
     * Create patientroom
     */
    async createPatientroomRaw(requestParameters: CreatePatientroomRequest): Promise<runtime.ApiResponse<EntPatientroom>> {
        if (requestParameters.patientroom === null || requestParameters.patientroom === undefined) {
            throw new runtime.RequiredError('patientroom','Required parameter requestParameters.patientroom was null or undefined when calling createPatientroom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patientrooms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPatientroomToJSON(requestParameters.patientroom),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientroomFromJSON(jsonValue));
    }

    /**
     * Create patientroom
     * Create patientroom
     */
    async createPatientroom(requestParameters: CreatePatientroomRequest): Promise<EntPatientroom> {
        const response = await this.createPatientroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create physician
     * Create physician
     */
    async createPhysicianRaw(requestParameters: CreatePhysicianRequest): Promise<runtime.ApiResponse<EntPhysician>> {
        if (requestParameters.physician === null || requestParameters.physician === undefined) {
            throw new runtime.RequiredError('physician','Required parameter requestParameters.physician was null or undefined when calling createPhysician.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/physicians`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPhysicianToJSON(requestParameters.physician),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPhysicianFromJSON(jsonValue));
    }

    /**
     * Create physician
     * Create physician
     */
    async createPhysician(requestParameters: CreatePhysicianRequest): Promise<EntPhysician> {
        const response = await this.createPhysicianRaw(requestParameters);
        return await response.value();
    }

    /**
     * get patient by ID
     * Delete a patient entity by ID
     */
    async deletePatientRaw(requestParameters: DeletePatientRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePatient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get patient by ID
     * Delete a patient entity by ID
     */
    async deletePatient(requestParameters: DeletePatientRequest): Promise<object> {
        const response = await this.deletePatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * get patientofphysician by ID
     * Delete a patientofphysician entity by ID
     */
    async deletePatientofphysicianRaw(requestParameters: DeletePatientofphysicianRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePatientofphysician.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patientofphysicians/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get patientofphysician by ID
     * Delete a patientofphysician entity by ID
     */
    async deletePatientofphysician(requestParameters: DeletePatientofphysicianRequest): Promise<object> {
        const response = await this.deletePatientofphysicianRaw(requestParameters);
        return await response.value();
    }

    /**
     * get patientroom by ID
     * Delete a patientroom entity by ID
     */
    async deletePatientroomRaw(requestParameters: DeletePatientroomRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePatientroom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patientrooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get patientroom by ID
     * Delete a patientroom entity by ID
     */
    async deletePatientroom(requestParameters: DeletePatientroomRequest): Promise<object> {
        const response = await this.deletePatientroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * get physician by ID
     * Delete a physician entity by ID
     */
    async deletePhysicianRaw(requestParameters: DeletePhysicianRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePhysician.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/physicians/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get physician by ID
     * Delete a physician entity by ID
     */
    async deletePhysician(requestParameters: DeletePhysicianRequest): Promise<object> {
        const response = await this.deletePhysicianRaw(requestParameters);
        return await response.value();
    }

    /**
     * get patient by ID
     * Get a patient entity by ID
     */
    async getPatientRaw(requestParameters: GetPatientRequest): Promise<runtime.ApiResponse<EntPatient>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPatient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientFromJSON(jsonValue));
    }

    /**
     * get patient by ID
     * Get a patient entity by ID
     */
    async getPatient(requestParameters: GetPatientRequest): Promise<EntPatient> {
        const response = await this.getPatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * get patientroom by ID
     * Get a patientroom entity by ID
     */
    async getPatientroomRaw(requestParameters: GetPatientroomRequest): Promise<runtime.ApiResponse<EntPatientroom>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPatientroom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patientrooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientroomFromJSON(jsonValue));
    }

    /**
     * get patientroom by ID
     * Get a patientroom entity by ID
     */
    async getPatientroom(requestParameters: GetPatientroomRequest): Promise<EntPatientroom> {
        const response = await this.getPatientroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * get physician by ID
     * Get a physician entity by ID
     */
    async getPhysicianRaw(requestParameters: GetPhysicianRequest): Promise<runtime.ApiResponse<EntPhysician>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPhysician.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/physicians/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPhysicianFromJSON(jsonValue));
    }

    /**
     * get physician by ID
     * Get a physician entity by ID
     */
    async getPhysician(requestParameters: GetPhysicianRequest): Promise<EntPhysician> {
        const response = await this.getPhysicianRaw(requestParameters);
        return await response.value();
    }

    /**
     * list patient entities
     * List patient entities
     */
    async listPatientRaw(requestParameters: ListPatientRequest): Promise<runtime.ApiResponse<Array<EntPatient>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPatientFromJSON));
    }

    /**
     * list patient entities
     * List patient entities
     */
    async listPatient(requestParameters: ListPatientRequest): Promise<Array<EntPatient>> {
        const response = await this.listPatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * list patientofphysician entities
     * List patientofphysician entities
     */
    async listPatientofphysicianRaw(requestParameters: ListPatientofphysicianRequest): Promise<runtime.ApiResponse<Array<EntPatientofphysician>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patientofphysicians`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPatientofphysicianFromJSON));
    }

    /**
     * list patientofphysician entities
     * List patientofphysician entities
     */
    async listPatientofphysician(requestParameters: ListPatientofphysicianRequest): Promise<Array<EntPatientofphysician>> {
        const response = await this.listPatientofphysicianRaw(requestParameters);
        return await response.value();
    }

    /**
     * list patientroom entities
     * List patientroom entities
     */
    async listPatientroomRaw(requestParameters: ListPatientroomRequest): Promise<runtime.ApiResponse<Array<EntPatientroom>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patientrooms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPatientroomFromJSON));
    }

    /**
     * list patientroom entities
     * List patientroom entities
     */
    async listPatientroom(requestParameters: ListPatientroomRequest): Promise<Array<EntPatientroom>> {
        const response = await this.listPatientroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * list physician entities
     * List physician entities
     */
    async listPhysicianRaw(requestParameters: ListPhysicianRequest): Promise<runtime.ApiResponse<Array<EntPhysician>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/physicians`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPhysicianFromJSON));
    }

    /**
     * list physician entities
     * List physician entities
     */
    async listPhysician(requestParameters: ListPhysicianRequest): Promise<Array<EntPhysician>> {
        const response = await this.listPhysicianRaw(requestParameters);
        return await response.value();
    }

    /**
     * update patient by ID
     * Update a patient entity by ID
     */
    async updatePatientRaw(requestParameters: UpdatePatientRequest): Promise<runtime.ApiResponse<EntPatient>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePatient.');
        }

        if (requestParameters.patient === null || requestParameters.patient === undefined) {
            throw new runtime.RequiredError('patient','Required parameter requestParameters.patient was null or undefined when calling updatePatient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntPatientToJSON(requestParameters.patient),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientFromJSON(jsonValue));
    }

    /**
     * update patient by ID
     * Update a patient entity by ID
     */
    async updatePatient(requestParameters: UpdatePatientRequest): Promise<EntPatient> {
        const response = await this.updatePatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * update patientroom by ID
     * Update a patientroom entity by ID
     */
    async updatePatientroomRaw(requestParameters: UpdatePatientroomRequest): Promise<runtime.ApiResponse<EntPatientroom>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePatientroom.');
        }

        if (requestParameters.patientroom === null || requestParameters.patientroom === undefined) {
            throw new runtime.RequiredError('patientroom','Required parameter requestParameters.patientroom was null or undefined when calling updatePatientroom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patientrooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntPatientroomToJSON(requestParameters.patientroom),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientroomFromJSON(jsonValue));
    }

    /**
     * update patientroom by ID
     * Update a patientroom entity by ID
     */
    async updatePatientroom(requestParameters: UpdatePatientroomRequest): Promise<EntPatientroom> {
        const response = await this.updatePatientroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * update physician by ID
     * Update a physician entity by ID
     */
    async updatePhysicianRaw(requestParameters: UpdatePhysicianRequest): Promise<runtime.ApiResponse<EntPhysician>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePhysician.');
        }

        if (requestParameters.physician === null || requestParameters.physician === undefined) {
            throw new runtime.RequiredError('physician','Required parameter requestParameters.physician was null or undefined when calling updatePhysician.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/physicians/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntPhysicianToJSON(requestParameters.physician),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPhysicianFromJSON(jsonValue));
    }

    /**
     * update physician by ID
     * Update a physician entity by ID
     */
    async updatePhysician(requestParameters: UpdatePhysicianRequest): Promise<EntPhysician> {
        const response = await this.updatePhysicianRaw(requestParameters);
        return await response.value();
    }

}
